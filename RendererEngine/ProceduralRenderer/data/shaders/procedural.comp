#version 460
#extension GL_GOOGLE_include_directive : require

#include "noise.h"

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0, rgba8) uniform image2D outputImage;
layout(set = 0, binding = 1) uniform CameraProperty { 
	mat4 view;
	mat4 proj;
	mat4 viewInverse;
	mat4 projInverse;
	mat4 model;
	vec3 sunDir;
	float near;
	float far;
	float dt;
} cam;

layout(push_constant) uniform Params {
	uint samples;
	uint width;
	uint height;
	float timeElapsed;
} params;

struct Ray {
	vec3 origin;
	vec3 direction;
};

struct Stat {
	uint stepCount;
};

const float pi = 3.14159;

// TODO 
// - Add reflection path tracing (as raymarching.)
// - Control octave with ImGui
// - Better camera movement
// - Restrain rendering in a cube (and render terrain like a model.)
// https://wangyasai.github.io/Perlin-Noise/
// https://gpfault.net/posts/perlin-noise.txt.html
// https://www.iquilezles.org/www/articles/terrainmarching/terrainmarching.htm
// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
// https://computergraphics.stackexchange.com/questions/161/what-is-ray-marching-is-sphere-tracing-the-same-thing
// https://www.shadertoy.com/view/Xds3zN #for union & scene management
// https://iquilezles.org/www/articles/rmshadows/rmshadows.htm #shadows
// http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/

Ray generateRayForPixel(uint x, uint y)
{
	uint seed = genFirstSeed(x, y + params.samples);
	const vec2 subpixelJitter = vec2(rnd(seed), rnd(seed));// vec2(noise(vec2(x, y + params.samples)) - 0.5, noise(vec2(y, x+ params.samples)) - 0.5);
	const vec2 pixelPos = gl_GlobalInvocationID.xy;
	const vec2 pixelDim = vec2(params.width, params.height);
	const vec2 texcoord = (pixelPos + subpixelJitter) / pixelDim;
	const vec2 screenPos = texcoord * 2.0 - 1.0;
	const vec4 camPos    = cam.viewInverse * vec4(0, 0, 0, 1);
	const vec4 camTarget = cam.projInverse * vec4(screenPos.x, screenPos.y, 1, 1);
	const vec4 camDir    = cam.viewInverse * vec4(normalize(camTarget.xyz), 0);
	Ray ray;
	ray.origin = camPos.xyz;
	ray.direction = camDir.xyz;
	return ray;
}

// --- Merging SDF
// intersection
float intersectSDF(float distA, float distB)
{
	return max(distA, distB);
}
vec2 intersectSDF(vec2 distA, vec2 distB)
{
	return (distA.x > distB.x) ? distA : distB;
}
// union
float unionSDF(float distA, float distB)
{
	return min(distA, distB);
}
vec2 unionSDF(vec2 distA, vec2 distB)
{
	return (distA.x < distB.x) ? distA : distB;
}
// substraction
float substractionSDF(float distA, float distB)
{
	return max(-distA, distB);
}
vec2 substractionSDF(vec2 distA, vec2 distB)
{
	return (-distA.x > distB.x) ? distA : distB;
}

// --- shape SDF
float planeSDF(vec3 p) {
	return p.y;
}
float sphereSDF(vec3 p, float s) {
	return length(p) - s;
}
float noiseSDF(vec3 p, float freq, float amp) {
	return noise(vec2(p.x, p.z) / freq) * amp - p.y; // Add p after
}
float boxSDF(vec3 p, vec3 b) {
	vec3 d = abs(p) - b;
	return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}
float torusSDF( vec3 p, vec2 t ){
	vec2 q = vec2(length(p.xz)-t.x,p.y);
	return length(q)-t.y;
}
float cappedTorusSDF(in vec3 p, in vec2 sc, in float ra, in float rb){
	p.x = abs(p.x);
	float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);
	return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;
}
float infiniteCylinderSDF(vec3 p, vec3 c){
	return length(p.xz-c.xy)-c.z;
}

// --- Custom SDF
float moutainSDF(vec3 p)
{
	const float octave0 = noiseSDF(p, 1000, 100.0);
	const float octave1 = noiseSDF(p, 100, 50.0);
	const float octave2 = noiseSDF(p, 5, 0.1);
	const float octave3 = noiseSDF(p, 10, 0.2);
	return octave0 + octave1 + octave2 + octave3 - 10 + p.y * 5;
}

float waterSDF(vec3 p) 
{
	return planeSDF(p);
}

// --- Materials
const uint MATERIAL_MOUNTAIN = 0;
const uint MATERIAL_WATER = 1;

// --- Scene definition
vec2 map(vec3 stepPoint) {
	vec2 res = vec2(1e10, 0.0);
	res = unionSDF(res, vec2(moutainSDF(stepPoint - vec3(0)), MATERIAL_MOUNTAIN));
	res = unionSDF(res, vec2(waterSDF(stepPoint - vec3(0)), MATERIAL_WATER));
	//res = unionSDF(res, vec2(sphereSDF(stepPoint - vec3(0.0, 20.0, 0.0), 5.0), 2));
	return res;
}


// --- Compute normal using derivative technique
vec3 getNormal(vec3 p)
{
const float eps = 0.01f;
#if 0
	// Central difference
	return normalize(
		vec3(
			map(vec3(p.x - eps, p.y, p.z)).x - map(vec3(p.x + eps, p.y, p.z)).x,
			2.0 * eps,
			map(vec3(p.x, p.y, p.z - eps)).x - map(vec3(p.x, p.y, p.z + eps)).x
		)
	);
#else
	// Tetrahedron 
	const vec2 k = vec2(1,-1);
	return normalize(
		k.xyy*map(p + k.xyy * eps).x + 
		k.yyx*map(p + k.yyx * eps).x + 
		k.yxy*map(p + k.yxy * eps).x +
		k.xxx*map(p + k.xxx * eps).x
	);
#endif
}


// --- RayMarching
bool castRay(in Ray ray, out float dist, out uint materialID, inout Stat stats)
{
	float lh = 0.0f;
	float ly = 0.0f;
	// TODO check global bounding box & skip raymarching if ray not inside.
	for(float t = cam.near; t < cam.far; t += cam.dt)
	{
		const vec3 stepPos = ray.origin + ray.direction * t;
		const vec2 res = map(stepPos);
		stats.stepCount++;
		// We are inside.
		if (res.x < 0.0)
		{
			// interpolate the intersection distance
			dist = t - cam.dt * (-res.x / (lh - res.x));
			materialID = uint(res.y);
			return true;
		}
		lh = res.x;
		ly = stepPos.y;
	}
	return false;
}

#define USE_SOFT_SHADOW

float shadow(in vec3 ro, in vec3 rd)
{
#ifdef USE_SOFT_SHADOW
	const float k = 2.f; // 2, 8, 32, 128, the more, the sharper
	const float mint = cam.near; // avoid self intersection
	const float maxt = cam.far / 10.f;
	float res = 1.0;
	for(float t = mint; t < maxt;)
	{
		float h = map(ro + rd*t).x;
		if (h < 0.001)
			return 0.0;
		res = min(res, k * h / t);
		t += h;
	}
	return res;
#else
	const float mint = cam.near; // avoid self intersection
	const float maxt = cam.far / 10.f;
	for(float t = mint; t < maxt;)
	{
		float h = map(ro + rd*t).x;
		if (h < 0.001)
			return 0.f;
		t += h;
	}
	return 1.f;
#endif
}

// --- Shading
vec4 shade(in Ray ray, in float t, in uint materialID)
{
	const vec3 hitPoint = ray.origin + ray.direction * t;
	vec4 color = vec4(0);
	switch(materialID) {
		case MATERIAL_MOUNTAIN:
			color = vec4(0.17, 0.63, 0.31, 1.0);
			break;
		case MATERIAL_WATER:
			color = vec4(0.17, 0.61, 0.83, 1);
			break;
		default:
			color = vec4(1,1,1,1);
			break;
	}
	const vec3 normal = getNormal(hitPoint);
	const float shadowIntensity = shadow(hitPoint, cam.sunDir);
	const float cosTheta = max(dot(normal, cam.sunDir), 0.1f);
	return color * cosTheta * shadowIntensity;
}

vec4 skyColor(in Ray ray)
{
	const vec4 upSky = vec4(0.09, 0.51, 1.0, 1);
	const vec4 downSky = vec4(0.38, 0.75, 1.0, 1);
	return mix(downSky, upSky, max(dot(ray.direction, vec3(0, 1, 0)), 0));
}

// --- Main
void main()
{
	Ray ray = generateRayForPixel(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	Stat stat;
	stat.stepCount = 0;
	vec4 outputColor = vec4(0);
	float t;
	uint materialID;
	if(castRay(ray, t, materialID, stat)) 
	{
		outputColor = shade(ray, t, materialID);
	}
	else
	{
		outputColor = skyColor(ray);
	}
#if 0 // Heat map
	imageStore(
		outputImage,
		ivec2(gl_GlobalInvocationID.xy),
		vec4(stat.stepCount / cam.far, 0, 0, 1)
	);
#else
	if(params.samples == 0)
	{
		imageStore(
			outputImage,
			ivec2(gl_GlobalInvocationID.xy),
			outputColor
		);
	}
	else
	{
		const vec4 inputColor = imageLoad(outputImage, ivec2(gl_GlobalInvocationID.xy));
		imageStore(
			outputImage,
			ivec2(gl_GlobalInvocationID.xy),
			mix(inputColor, outputColor, 1.f / (params.samples + 1.f))
		);
	}
#endif
}
